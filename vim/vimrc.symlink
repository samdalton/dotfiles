call pathogen#infect()

filetype on  " Automatically detect file types.
set nocompatible  " We don't want vi compatibility.

let mapleader=','

" Minibuffer Explorer Settings
" let g:miniBufExplMapWindowNavVim = 1
" let g:miniBufExplMapWindowNavArrows = 1
" let g:miniBufExplMapCTabSwitchBufs = 1
" let g:miniBufExplModSelTarget = 1

let g:CommandTMaxHeight = 20

" alt+n or alt+p to navigate between entries in QuickFix
"map <silent> <m-p> :cp <cr>
"map <silent> <m-n> :cn <cr>

syntax enable

"set cf  " Enable error files & error jumping. 
set clipboard+=unnamed  " Yanks go on clipboard instead. 
set history=4096  " Number of things to remember in history. 
set autowrite  " Writes on make/shell commands 
"set ruler  " Ruler on 
set nu  " Line numbers on 
set wrap  " Line wrapping off 
set timeoutlen=250  " Time to wait after ESC (default causes an annoying delay)
set t_Co=256 


" background
colorscheme solarized 
set background=dark
let g:solarized_style="dark"

function! ToggleBackground()
    if (g:solarized_style=="dark")
        let g:solarized_style="light"
        set background=light
    else
        let g:solarized_style="dark"
        set background=dark
    endif
endfunction

command! Togbg call ToggleBackground()
nnoremap <F5> :call ToggleBackground()<CR>
inoremap <F5> <ESC>:call ToggleBackground()<CR>a
vnoremap <F5> <ESC>:call ToggleBackground()<CR>v

nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
nnoremap <leader>d "ld
vnoremap <leader>d "ld

" set temp files to be somewhere else, not in cd
set backup                     " Enable creation of backup file.
set backupdir=/tmp " Where backups will go.
set directory=/tmp     " Where temporary files will go.

" Formatting (some of these are for coding in C and C++) 
set sts=4  " Tabs are 4 spaces 
set bs=2  " Backspace over everything in insert mode 
set shiftwidth=4  " Tabs under smart indent 
set showcmd
set nocp incsearch 
set cinoptions=:0,p0,t0 
set cinwords=if,else,while,do,for,switch,case 
set formatoptions=tcqr 
set cindent 
set autoindent 
set smarttab 
set expandtab 
filetype indent on
filetype plugin indent on

"Search
set ignorecase
set smartcase
nnoremap / /\v
vnoremap / /\v
set incsearch
set showmatch
set hlsearch
nnoremap <tab> %
vnoremap <tab> %

"set wildignore=*.html


" Visual 
set showmatch  " Show matching brackets. 
set mat=5  " Bracket blinking. 

set novisualbell  " No blinking . 
set noerrorbells t_vb=  " No noise. 
set laststatus=2  " Always show status line. 

nnoremap j gj
nnoremap k gk

" quick command line
nnoremap ; :

" split pane settings
set noea

" Custom leader commands
inoremap jj <ESC>
nnoremap <leader><space> :noh<CR>
nnoremap <leader>a :Ack
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>l
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap gn :NERDTreeToggle<CR>
nnoremap <leader>w :set wrap<CR>
nnoremap <leader>nw :set nowrap<CR>
nnoremap <leader>t :CommandT<CR>
nnoremap <leader>. :set autochdir<CR>:pwd <CR>
nnoremap <leader>/ :set noautochdir<CR>:pwd <CR>
nnoremap <leader>r :%s/
nnoremap <leader>n  <C-w>s<C-w>l :enew<CR>

"Keymappings
":map <Leader>f :FuzzyFinderFileWithFullCwd<CR>
:map <Leader>f :CommandTFlush<CR>
:nmap H 0
:nmap L $

" Ruby / Rails specific
:map gc :Rcontroller<CR> 
:map gm :Rmodel<CR> 
:map gv :Rview<CR> 
:map gl :Rlayout<CR>
:map gs :Rspec<CR>
:map gw :Rfind<Space>
:map gec :Rcontroller<Space>
:map gec :Rcontroller<Space>
:map gem :Rmodel<Space>
:map gev :Rview<Space>
:map gel :Rlayout<Space>
:map ges :Rspec<Space>
:map <F2> :Rtree<CR>

" Change which file opens after executing :Rails command
let g:rails_default_file='config/database.yml'

" navigate through ruby methods
:nmap [ ?def <CR> :noh <CR>
:nmap ] /def <CR> :noh <CR>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

":map <Capslock> <Esc>
map  <Help> <Esc>
map! <Help> <Esc>
map  <Insert> <Esc>
map! <Insert> <Esc>

nnoremap <F3> :set invpaste paste?<CR>
set pastetoggle=<F3>
set showmode

"inoremap <C-space> <C-X><tab>

" gvim specific 
set mousehide  " Hide mouse after chars typed 
set mouse=a  " Mouse in all modes
if has('gui_running')
    set transparency=5
endif
":set guifont=Menlo:h14
"set guifont=Menlo\ Powerline\ 18


":command C let @/=""

"ruby
"autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
"autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
"autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
"autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"improve autocomplete menu color
"highlight Pmenu ctermbg=238 gui=bold

" expand active buffer in all directions (farks up nodetree)
let g:window_expanded="no"
function! ToggleExpandWindow()
    if (g:window_expanded=="no")
        let g:window_expanded="yes"
        wincmd |
        wincmd _
    else
        let g:window_expanded="no"
        wincmd =
    endif
endfunction

nnoremap <leader>e :call ToggleExpandWindow()<CR>

" tabbing
nnoremap <leader>nt :tabnew<CR>
nnoremap <leader>h :tabprevious<CR>
nnoremap <leader>l :tabnext<CR>

" generate tags
nnoremap <leader>rt :!ctags -R --exclude=.git --exclude=log *<CR><CR>

let g:Powerline_symbols = 'fancy' " get the arrows and symbols in powerline

" fix coffeescript tabbing
au BufNewFile,BufReadPost *.coffee setl shiftwidth=4 expandtab
" json syntax highlighting
autocmd BufNewFile,BufRead *.json set ft=javascript
