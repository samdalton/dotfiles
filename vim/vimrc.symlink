set nocompatible

filetype off

call pathogen#infect()

filetype plugin indent on

let mapleader=','

syntax enable

set clipboard+=unnamed  " Yanks go on clipboard instead. 
set history=4096  " Number of things to remember in history. 
set autowrite  " Writes on make/shell commands 
set modelines=0
set ruler
set number
set wrap
set cursorline
set textwidth=80
set colorcolumn=+1,+2
set timeoutlen=250  " Time to wait after ESC (default causes an annoying delay)
set mouse=a
set tabstop=4
set softtabstop=4
set backspace=2  " Backspace over everything in insert mode 
set shiftwidth=4  " Tabs under smart indent 
set smarttab 
set expandtab 
set scrolloff=3

autocmd User Rails set tabstop=4 softtabstop=4 shiftwidth=4 expandtab

set cindent 
set autoindent 

set showcmd
set nocp incsearch 
set gdefault " global replacement
set cinoptions=:0,p0,t0 
set cinwords=if,else,while,do,for,switch,case 
set formatoptions=cqr 

"Search
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
nnoremap / /\v
vnoremap / /\v
nnoremap <tab> %
vnoremap <tab> %

" Visual 
set showmatch  " Show matching brackets. 
set matchtime=5  " Bracket blinking. 
set novisualbell  " No blinking . 
set noerrorbells t_vb=  " No noise. 
set laststatus=2  " Always show status line. 

" Backups
set backup                     " Enable creation of backup file.
set backupdir=/tmp " Where backups will go.
set directory=/tmp     " Where temporary files will go.

" split pane settings
set noequalalways

" vim rc
nnoremap <leader>ev <C-w><C-v><C-l>:edit $MYVIMRC<cr>
nnoremap <leader>rv :source $MYVIMRC<cr>

" Custom leader commands
nnoremap <leader><space> :noh<CR>
nnoremap <leader>a :Ack
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>l
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap gn :NERDTreeToggle<CR>
nnoremap <leader>w :set wrap<CR>
nnoremap <leader>nw :set nowrap<CR>
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>. :set autochdir<CR>:pwd <CR>
nnoremap <leader>/ :set noautochdir<CR>:pwd <CR>
nnoremap <leader>r :%s/
nnoremap <leader>n  <C-w>s<C-w>l :enew<CR>
nnoremap <leader>ll :match ErrorMsg '\%>80v.\+'<CR>

"Keymappings
:nmap H 0
:nmap L $
nnoremap j gj
nnoremap k gk

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader>d "ld
nnoremap <leader>D "lD
vnoremap <leader>d "ld

" quick command line
nnoremap ; :

" Ruby / Rails specific
:map gc :Rcontroller<CR> 
:map gm :Rmodel<CR> 
:map gv :Rview<CR> 
:map gl :Rlayout<CR>
:map gs :Rspec<CR>
:map gw :Rfind<Space>
:map gec :Rcontroller<Space>
:map gem :Rmodel<Space>
:map gev :Rview<Space>
:map gel :Rlayout<Space>
:map ges :Rspec<Space>

" navigate through ruby methods
:nmap [ ?def <CR> :noh <CR>
:nmap ] /def <CR> :noh <CR>

nnoremap <F3> :set invpaste paste?<CR>
set pastetoggle=<F3>

" tabbing
nnoremap <leader>nt :tabnew<CR>
nnoremap <leader>h :tabprevious<CR>
nnoremap <leader>l :tabnext<CR>

" expand active buffer in all directions (farks up nodetree)
let g:window_expanded="no"
function! ToggleExpandWindow()
    if (g:window_expanded=="no")
        let g:window_expanded="yes"
        wincmd |
        wincmd _
    else
        let g:window_expanded="no"
        wincmd =
    endif
endfunction
nnoremap <leader>e :call ToggleExpandWindow()<CR>

" generate tags
nnoremap <leader>rt :!ctags -R --exclude=.git --exclude=log *<CR><CR>

" json syntax highlighting
"autocmd BufNewFile,BufRead *.json set ft=javascript

let g:Powerline_symbols = 'fancy' " get the arrows and symbols in powerline

" background
colorscheme solarized 
set t_Co=256 " set 256 colors
set background=dark
let g:solarized_style="dark"
function! ToggleBackground()
    if (g:solarized_style=="dark")
        let g:solarized_style="light"
        set background=light
    else
        let g:solarized_style="dark"
        set background=dark
    endif
endfunction
command! Togbg call ToggleBackground()
nnoremap <F5> :call ToggleBackground()<CR>
inoremap <F5> <ESC>:call ToggleBackground()<CR>a
vnoremap <F5> <ESC>:call ToggleBackground()<CR>v

let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_auto_select = 1
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

augroup vimrc_autocmds
  "autocmd BufEnter * highlight OverLength ctermbg=red guibg=#292939
  autocmd BufEnter * match ErrorMsg '\%>80v.\+'
augroup END
