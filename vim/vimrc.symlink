set nocompatible

call pathogen#infect()

set wildignore+=*/tmp*,*.swp,*.zip,*.html,coverage/*

filetype on
filetype indent on
filetype plugin indent on

let mapleader=','

syntax enable

set clipboard+=unnamed  " Yanks go on clipboard instead. 
set history=4096  " Number of things to remember in history. 
set autowrite  " Writes on make/shell commands 
set modelines=0
set nonumber
set wrap
set timeoutlen=250  " Time to wait after ESC (default causes an annoying delay)       
set mouse=a
set tabstop=4
set softtabstop=4
set backspace=2  " Backspace over everything in insert mode 
set shiftwidth=4  " Tabs under smart indent 
set smarttab 
set expandtab 
set cindent 
set autoindent 
set scrolloff=3

autocmd User Rails set tabstop=4 softtabstop=4 shiftwidth=4 expandtab

set showcmd
set nocp incsearch 
set gdefault " global replacement
set cinoptions=:0,p0,t0 
set cinwords=if,else,while,do,for,switch,case 
set formatoptions=tcqr 

"Search
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
nnoremap / /\v
vnoremap / /\v
nnoremap <tab> %
vnoremap <tab> %
let g:ctrlp_clear_cache_on_exit = 0

" Visual 
set showmatch  " Show matching brackets. 
set matchtime=5  " Bracket blinking. 
set novisualbell  " No blinking . 
set noerrorbells t_vb=  " No noise. 
set laststatus=2  " Always show status line. 

" Backups
set backup                     " Enable creation of backup file.
set backupdir=/tmp " Where backups will go.
set directory=/tmp     " Where temporary files will go.

" split pane settings
set noequalalways

" vim rc
nnoremap <leader>ev <C-w><C-v><C-l>:edit $MYVIMRC<cr>
nnoremap <leader>rv :source $MYVIMRC<cr>

" Custom leader commands
nnoremap <leader><space> :noh<CR>
nnoremap <leader>gb :!git blame %<CR>
nnoremap <leader>a :Ack
nnoremap <leader>j :tabprevious<CR>
nnoremap <leader>k :tabnext<CR>
nnoremap <leader>nt :tabnew<CR>
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>l
nnoremap gt :NERDTreeToggle<CR><CR>
nnoremap <leader>w :set wrap<CR>
nnoremap <leader>nw :set nowrap<CR>
nnoremap <leader>p :CtrlP<CR>
nnoremap <leader>. :set autochdir<CR>:pwd <CR>
nnoremap <leader>/ :set noautochdir<CR>:pwd <CR>
nnoremap <leader>r :%s/
nnoremap <leader>n  <C-w>s<C-w>l :enew<CR>
nnoremap <leader>c :Scratch<CR>
inoremap jj <ESC>
nnoremap <leader>rt :!ctags -R --exclude=.git --exclude=log *<CR><CR>

"Keymappings
:nmap H 0
:nmap L $
nnoremap j gj
nnoremap k gk

" More ways to get out of insert mode
:map <Capslock> <Esc>
map  <Help> <Esc>
map! <Help> <Esc>
map  <Insert> <Esc>
map! <Insert> <Esc>

" Yank file
nnoremap yf mwggyG`w

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader>d "ld
nnoremap <leader>D "lD
vnoremap <leader>d "ld

" Make Y behave like other capitals
map Y y$

" quick command line
nnoremap ; :
nmap <CR> :write<CR>

" Ruby / Rails specific
:map gc :Rcontroller<CR> 
:map gm :Rmodel<CR> 
:map gv :Rview<CR> 
:map gl :Rlayout<CR>
:map gs :Rspec<CR>
:map gw :Rfind<Space>
:map gec :Rcontroller<Space>
:map gem :Rmodel<Space>
:map gev :Rview<Space>
:map gel :Rlayout<Space>
:map ges :Rspec<Space>

" navigate through ruby methods
:nmap [ ?def <CR> :noh <CR>
:nmap ] /def <CR> :noh <CR>

nnoremap <F3> :set invpaste paste?<CR>
set pastetoggle=<F3>

" tabbing
nnoremap <leader>nt :tabnew<CR>
nnoremap <leader>h :tabprevious<CR>
nnoremap <leader>l :tabnext<CR>

" expand active buffer in all directions (farks up nodetree)
let g:window_expanded="no"
function! ToggleExpandWindow()
    if (g:window_expanded=="no")
        let g:window_expanded="yes"
        wincmd |
        wincmd _
    else
        let g:window_expanded="no"
        wincmd =
    endif
endfunction
nnoremap <leader>e :call ToggleExpandWindow()<CR>

" generate tags
nnoremap <leader>rt :!ctags -R --exclude=.git --exclude=log *<CR><CR>

" json syntax highlighting
autocmd BufNewFile,BufRead *.json set ft=javascript

let g:Powerline_symbols = 'fancy' " get the arrows and symbols in powerline

if has('gui_running')
    set transparency=5
endif

" background
colorscheme solarized 
set t_Co=256 " set 256 colors
set background=light
let g:solarized_style="dark"
function! ToggleBackground()
    if (g:solarized_style=="dark")
        let g:solarized_style="light"
        set background=light
    else
        let g:solarized_style="dark"
        set background=dark
    endif
endfunction
command! Togbg call ToggleBackground()
nnoremap <F5> :call ToggleBackground()<CR>
inoremap <F5> <ESC>:call ToggleBackground()<CR>a
vnoremap <F5> <ESC>:call ToggleBackground()<CR>v

let g:vimclojure#HighlightBuildtins = 1
let g:vimclojure#ParenRainbow = 1
let vimclojure#WantNailgun = 1

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

" Cucumber tables help
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
